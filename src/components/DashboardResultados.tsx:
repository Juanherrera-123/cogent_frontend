import React, { useState, useEffect } from "react";
import { BarChart, Bar, PieChart, Pie, Cell, XAxis, YAxis, Tooltip, Legend, ResponsiveContainer } from "recharts";
import * as XLSX from "xlsx";

type Props = {
  soloGenerales?: boolean; // true: solo vista general, false: todo
};

const colores = ["#2a57d3", "#1db2f5", "#ffbc1c", "#f2600e", "#d7263d"];

export default function DashboardResultados({ soloGenerales }: Props) {
  const [datos, setDatos] = useState<any[]>([]);
  const [empresaFiltro, setEmpresaFiltro] = useState("todas");

  useEffect(() => {
    const arr = JSON.parse(localStorage.getItem("resultadosCogent") || "[]");
    setDatos(arr);
  }, []);

  // Empresas únicas
  const empresas = Array.from(new Set(datos.map((d) => d.ficha?.empresa || "Sin empresa")));
  
  // Datos según filtro
  const datosMostrados = datos.filter(
    (d) => empresaFiltro === "todas" || d.ficha?.empresa === empresaFiltro
  );

  // Resumenes para las gráficas
  const nivelesEstres = ["Muy bajo", "Bajo", "Medio", "Alto", "Muy alto"];
  const resumenEstres = nivelesEstres.map(nivel => ({
    nivel,
    cantidad: datosMostrados.filter((r: any) => r.resultadoEstres?.nivel === nivel).length
  }));

  const nivelesExtra = ["Sin riesgo", "Riesgo bajo", "Riesgo medio", "Riesgo alto", "Riesgo muy alto"];
  const resumenExtra = nivelesExtra.map(nivel => ({
    nivel,
    cantidad: datosMostrados.filter((r: any) => r.resultadoExtralaboral?.nivelGlobal === nivel).length
  }));

  // Exportar a Excel
  const handleExportar = () => {
    // Preparamos un array plano para exportar
    const filas = datosMostrados.map((d, i) => ({
      Nro: i + 1,
      Empresa: d.ficha?.empresa || "",
      Nombre: d.ficha?.nombre || "",
      Sexo: d.ficha?.sexo || "",
      Cargo: d.ficha?.cargo || "",
      "Estrés - Puntaje": d.resultadoEstres?.puntajeTransformado ?? "",
      "Estrés - Nivel": d.resultadoEstres?.nivel ?? "",
      "Extralaboral - Puntaje": d.resultadoExtralaboral?.puntajeGlobal ?? "",
      "Extralaboral - Nivel": d.resultadoExtralaboral?.nivelGlobal ?? "",
      Fecha: d.fecha ? new Date(d.fecha).toLocaleString() : "",
    }));
    const wb = XLSX.utils.book_new();
    const ws = XLSX.utils.json_to_sheet(filas);
    XLSX.utils.book_append_sheet(wb, ws, "Resultados");
    XLSX.writeFile(wb, "resultados_cogent.xlsx");
  };

  return (
    <div className="max-w-5xl mx-auto bg-white p-8 rounded-2xl shadow-xl mt-8 flex flex-col gap-8">
      <h2 className="text-3xl font-bold text-cogent-blue mb-4">Dashboard de Resultados</h2>

      {/* Filtro por empresa y botón exportar */}
      <div className="flex flex-col md:flex-row gap-4 items-center mb-4">
        <div>
          <label className="font-semibold mr-2">Filtrar por empresa:</label>
          <select
            value={empresaFiltro}
            onChange={(e) => setEmpresaFiltro(e.target.value)}
            className="input"
          >
            <option value="todas">Todas</option>
            {empresas.map((e, idx) => (
              <option key={idx} value={e}>{e}</option>
            ))}
          </select>
        </div>
        <button
          onClick={handleExportar}
          className="ml-auto bg-cogent-blue text-white px-4 py-2 rounded-lg font-bold shadow hover:bg-cogent-sky"
        >
          Descargar Excel
        </button>
      </div>

      {/* Gráficas */}
      <div className="flex flex-col md:flex-row gap-8">
        {/* Gráfica de barras: Niveles de estrés */}
        <div className="flex-1">
          <h4 className="font-bold mb-2 text-cogent-blue">Niveles de Estrés (Cantidad)</h4>
          <ResponsiveContainer width="100%" height={250}>
            <BarChart data={resumenEstres}>
              <XAxis dataKey="nivel" />
              <YAxis allowDecimals={false} />
              <Tooltip />
              <Legend />
              <Bar dataKey="cantidad">
                {resumenEstres.map((_, i) => (
                  <Cell key={i} fill={colores[i % colores.length]} />
                ))}
              </Bar>
            </BarChart>
          </ResponsiveContainer>
        </div>

        {/* Gráfica de pastel: Niveles extralaborales */}
        <div className="flex-1">
          <h4 className="font-bold mb-2 text-cogent-blue">Niveles Extralaborales (%)</h4>
          <ResponsiveContainer width="100%" height={250}>
            <PieChart>
              <Pie
                data={resumenExtra}
                dataKey="cantidad"
                nameKey="nivel"
                outerRadius={80}
                label
              >
                {resumenExtra.map((_, i) => (
                  <Cell key={i} fill={colores[i % colores.length]} />
                ))}
              </Pie>
              <Tooltip />
              <Legend />
            </PieChart>
          </ResponsiveContainer>
        </div>
      </div>

      {/* Resultados individuales (solo si no es soloGenerales) */}
      {!soloGenerales && (
        <>
          <h3 className="text-xl font-bold mt-4 mb-2">Resultados individuales</h3>
          <div className="overflow-x-auto">
            <table className="w-full text-sm border">
              <thead className="bg-cogent-blue text-white">
                <tr>
                  <th>#</th>
                  <th>Empresa</th>
                  <th>Nombre</th>
                  <th>Sexo</th>
                  <th>Cargo</th>
                  <th>Puntaje Estrés</th>
                  <th>Nivel Estrés</th>
                  <th>Puntaje Extralaboral</th>
                  <th>Nivel Extralaboral</th>
                  <th>Fecha</th>
                </tr>
              </thead>
              <tbody>
                {datosMostrados.map((d, i) => (
                  <tr key={i} className="border-b">
                    <td>{i + 1}</td>
                    <td>{d.ficha?.empresa}</td>
                    <td>{d.ficha?.nombre}</td>
                    <td>{d.ficha?.sexo}</td>
                    <td>{d.ficha?.cargo}</td>
                    <td>{d.resultadoEstres?.puntajeTransformado ?? ""}</td>
                    <td>{d.resultadoEstres?.nivel ?? ""}</td>
                    <td>{d.resultadoExtralaboral?.puntajeGlobal ?? ""}</td>
                    <td>{d.resultadoExtralaboral?.nivelGlobal ?? ""}</td>
                    <td>{d.fecha ? new Date(d.fecha).toLocaleString() : ""}</td>
                  </tr>
                ))}
                {datosMostrados.length === 0 && (
                  <tr>
                    <td colSpan={10} className="text-center text-gray-400 py-6">
                      No hay resultados para mostrar.
                    </td>
                  </tr>
                )}
              </tbody>
            </table>
          </div>
        </>
      )}
    </div>
  );
}
